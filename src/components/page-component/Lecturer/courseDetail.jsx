import React, { useState, useEffect } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import "./courseDetail.css";

const CourseDetail = () => {
  const { id } = useParams();
  const [course, setCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const location = useLocation();

  // State m·ªõi ƒë·ªÉ l∆∞u video ƒëang ch·ªânh s·ª≠a (id c·ªßa video)
  const [editingVideoId, setEditingVideoId] = useState(null);
  // State form edit video
  const [editTitle, setEditTitle] = useState("");
  const [editDescription, setEditDescription] = useState("");
  const [editFile, setEditFile] = useState(null);
  const [editLoading, setEditLoading] = useState(false);
  const [editError, setEditError] = useState("");
  const [editMessage, setEditMessage] = useState("");

  useEffect(() => {
    const fetchCourseData = async () => {
      try {
        const response = await fetch(
          `http://localhost:5000/teacher/teaching/${id}`,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          }
        );
        if (!response.ok) {
          throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu kh√≥a h·ªçc");
        }
        const data = await response.json();
        setCourse(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchCourseData();
  }, [id]);

  const isFromCurrentCourses = location.state?.fromCurrentCourses || false;

  const handleAddVideo = () => {
    navigate(`/teacher/teaching/${course.id}/create-video`);
  };

  const handleDeleteVideo = async (videoId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a video n√†y kh√¥ng?")) return;

    try {
      const res = await fetch(
        `http://localhost:5000/teacher/teaching/${course.id}/delete/${videoId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "X√≥a video th·∫•t b·∫°i");
      }

      alert("X√≥a video th√†nh c√¥ng");

      // C·∫≠p nh·∫≠t state x√≥a video kh·ªèi list lu√¥n
      setCourse((prevCourse) => ({
        ...prevCourse,
        videos: prevCourse.videos.filter((v) => v.id !== videoId),
      }));
    } catch (error) {
      alert("L·ªói khi x√≥a video: " + error.message);
    }
  };

  const handleAddDescription = (videoId) => {
    alert(`Th√™m m√¥ t·∫£ cho video c√≥ ID: ${videoId}`);
    // Hi·ªán popup ho·∫∑c giao di·ªán th√™m m√¥ t·∫£ video
  };

  // M·ªü form edit video
  const handleEditVideoClick = (video) => {
    setEditingVideoId(video.id);
    setEditTitle(video.title);
    setEditDescription(video.videoDescription || "");
    setEditFile(null);
    setEditError("");
    setEditMessage("");
  };

  // ƒê√≥ng form edit video
  const handleCancelEdit = () => {
    setEditingVideoId(null);
    setEditError("");
    setEditMessage("");
  };

  // X·ª≠ l√Ω submit form edit video
  const handleEditSubmit = async (e) => {
    e.preventDefault();
    setEditLoading(true);
    setEditError("");
    setEditMessage("");

    try {
      const formData = new FormData();
      formData.append("titleVideo", editTitle);
      formData.append("videoDescription", editDescription);
      if (editFile) formData.append("upload_file", editFile);

      const res = await fetch(
        `http://localhost:5000/teacher/teaching/${course.id}/edit/${editingVideoId}`,
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
          body: formData,
        }
      );

      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
      }

      const data = await res.json();
      setEditMessage(data.message);

      // C·∫≠p nh·∫≠t video trong state course.videos v·ªõi d·ªØ li·ªáu m·ªõi
      setCourse((prevCourse) => {
        const updatedVideos = prevCourse.videos.map((v) =>
          v.id === editingVideoId
            ? {
                ...v,
                title: data.videoData.title,
                videoDescription: data.videoData.videoDescription,
                urlVideo: data.videoData.urlVideo,
                uploadDate: data.videoData.uploadDate,
              }
            : v
        );
        return { ...prevCourse, videos: updatedVideos };
      });

      // ƒê√≥ng form edit
      setEditingVideoId(null);
    } catch (err) {
      setEditError(err.message);
    } finally {
      setEditLoading(false);
    }
  };

  if (loading) return <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  if (error) return <div>L·ªói: {error}</div>;
  if (!course) return <div>Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.</div>;

  return (
    <div className="course-detail-container">
      <h2 className="course-title">{course.title}</h2>

      {/* ... c√°c section kh√°c nh∆∞ ban ƒë·∫ßu ... */}

      <section className="course-section">
        <h3>Danh s√°ch Video</h3>

        {course.videos && course.videos.length > 0 ? (
          <ul className="video-list">
            {course.videos.map((video) => (
              <li key={video.id} className="video-item">
                {editingVideoId === video.id ? (
                  // Form edit video
                  <form onSubmit={handleEditSubmit} className="edit-video-form">
                    {editError && <p style={{ color: "red" }}>{editError}</p>}
                    {editMessage && (
                      <p style={{ color: "green" }}>{editMessage}</p>
                    )}
                    <div>
                      <label>Ti√™u ƒë·ªÅ Video:</label>
                      <input
                        type="text"
                        value={editTitle}
                        onChange={(e) => setEditTitle(e.target.value)}
                        required
                      />
                    </div>
                    <div>
                      <label>M√¥ t·∫£ Video:</label>
                      <textarea
                        value={editDescription}
                        onChange={(e) => setEditDescription(e.target.value)}
                      />
                    </div>
                    <div>
                      <label>T·∫£i video m·ªõi (n·∫øu c√≥):</label>
                      <input
                        type="file"
                        accept="video/*"
                        onChange={(e) => setEditFile(e.target.files[0])}
                      />
                    </div>
                    <button type="submit" disabled={editLoading}>
                      {editLoading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t"}
                    </button>
                    <button
                      type="button"
                      onClick={handleCancelEdit}
                      disabled={editLoading}
                    >
                      H·ªßy
                    </button>
                  </form>
                ) : (
                  <>
                    <span>{video.title}</span>
                    <div className="video-buttons">
                      <button
                        className="delete-video-btn"
                        onClick={() => handleDeleteVideo(video.id)}
                      >
                        üóë X√≥a
                      </button>
                      <button
                        className="add-description-btn"
                        onClick={() => handleAddDescription(video.id)}
                      >
                        üìù Th√™m m√¥ t·∫£
                      </button>
                      <button
                        className="edit-video-btn"
                        onClick={() => handleEditVideoClick(video)}
                      >
                        ‚úèÔ∏è S·ª≠a
                      </button>
                    </div>
                  </>
                )}
              </li>
            ))}
          </ul>
        ) : (
          <p>Ch∆∞a c√≥ video n√†o</p>
        )}

        {/* N√∫t th√™m video */}
        {isFromCurrentCourses && (
          <button className="add-video-btn" onClick={handleAddVideo}>
            + Th√™m Video
          </button>
        )}
      </section>

      <button onClick={() => navigate(-1)} className="back-button">
        ‚Üê Quay l·∫°i
      </button>
    </div>
  );
};

export default CourseDetail;
