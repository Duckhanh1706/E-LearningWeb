import React, { useState, useEffect } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import "./courseDetail.css";
import courseData from "../../../db/course.json";

const CourseDetail = () => {
  const { id } = useParams();
  const [course, setCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const location = useLocation();

  const [editingVideoId, setEditingVideoId] = useState(null);
  const [editTitle, setEditTitle] = useState("");
  const [editDescription, setEditDescription] = useState("");
  const [editFile, setEditFile] = useState(null);
  const [editLoading, setEditLoading] = useState(false);
  const [editError, setEditError] = useState("");
  const [editMessage, setEditMessage] = useState("");

  useEffect(() => {
    const foundCourse = courseData.find((c) => c.id.toString() === id);
    if (foundCourse) {
      setCourse(foundCourse);
    } else {
      setError("Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.");
    }
    setLoading(false);
  }, [id]);

  const isFromCurrentCourses = location.state?.fromCurrentCourses || false;

  const handleDeleteVideo = (videoId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a video n√†y kh√¥ng?")) return;

    setCourse((prevCourse) => ({
      ...prevCourse,
      videoLists: prevCourse.videoLists.filter((v) => v.id !== videoId),
    }));

    alert("X√≥a video th√†nh c√¥ng");
  };

  const handleAddDescription = (videoId) => {
    alert(`Th√™m m√¥ t·∫£ cho video c√≥ ID: ${videoId}`);
  };

  const handleEditVideoClick = (video) => {
    setEditingVideoId(video.id);
    setEditTitle(video.title);
    setEditDescription(video.videoDescription || "");
    setEditFile(null);
    setEditError("");
    setEditMessage("");
  };

  const handleCancelEdit = () => {
    setEditingVideoId(null);
    setEditError("");
    setEditMessage("");
  };

  const handleEditSubmit = (e) => {
    e.preventDefault();
    setEditLoading(true);
    setEditError("");
    setEditMessage("");

    setTimeout(() => {
      setCourse((prevCourse) => {
        const updatedVideos = prevCourse.videoLists.map((v) =>
          v.id === editingVideoId
            ? {
                ...v,
                title: editTitle,
                videoDescription: editDescription,
              }
            : v
        );
        return { ...prevCourse, videoLists: updatedVideos };
      });

      setEditMessage("C·∫≠p nh·∫≠t video th√†nh c√¥ng");
      setEditingVideoId(null);
      setEditLoading(false);
    }, 1000);
  };

  if (loading) return <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  if (error) return <div>L·ªói: {error}</div>;
  if (!course) return <div>Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.</div>;

  return (
    <div className="course-detail-container">
      <h2 className="course-title">{course.title}</h2>

      <section className="course-info-section">
        <h3>Th√¥ng tin kh√≥a h·ªçc</h3>
        <p>
          <strong>M√¥ t·∫£:</strong> {course.description}
        </p>

        {course.instructor && (
          <>
            <p>
              <strong>Gi·∫£ng vi√™n:</strong> {course.instructor.name}
            </p>
            <p>
              <strong>Email:</strong> {course.instructor.email}
            </p>
            <p>
              <strong>M√¥ t·∫£ gi·∫£ng vi√™n:</strong> {course.instructor.description}
            </p>
          </>
        )}

        {course.price !== undefined && (
          <p>
            <strong>Gi√°:</strong> {course.price.toLocaleString()} VNƒê
          </p>
        )}

        {course.courseStatus && (
          <p>
            <strong>Tr·∫°ng th√°i kh√≥a h·ªçc:</strong> {course.courseStatus}
          </p>
        )}
        {course.student && (
          <p>
            <strong>S·ªë h·ªçc vi√™n ƒë√£ ƒëƒÉng k√Ω:</strong> {course.student.length}
          </p>
        )}
      </section>

      <section className="course-section">
        <h3>Danh s√°ch Video</h3>

        {course.videoLists && course.videoLists.length > 0 ? (
          <ul className="video-list">
            {course.videoLists.map((video) => (
              <li key={video.id} className="video-item">
                {editingVideoId === video.id ? (
                  <form onSubmit={handleEditSubmit} className="edit-video-form">
                    {editError && <p style={{ color: "red" }}>{editError}</p>}
                    {editMessage && (
                      <p style={{ color: "green" }}>{editMessage}</p>
                    )}
                    <div>
                      <label>Ti√™u ƒë·ªÅ Video:</label>
                      <input
                        type="text"
                        value={editTitle}
                        onChange={(e) => setEditTitle(e.target.value)}
                        required
                      />
                    </div>
                    <div>
                      <label>M√¥ t·∫£ Video:</label>
                      <textarea
                        value={editDescription}
                        onChange={(e) => setEditDescription(e.target.value)}
                      />
                    </div>
                    <div>
                      <label>T·∫£i video m·ªõi (n·∫øu c√≥):</label>
                      <input
                        type="file"
                        accept="video/*"
                        onChange={(e) => setEditFile(e.target.files[0])}
                        disabled
                      />
                    </div>
                    <button type="submit" disabled={editLoading}>
                      {editLoading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t"}
                    </button>
                    <button
                      type="button"
                      onClick={handleCancelEdit}
                      disabled={editLoading}
                    >
                      H·ªßy
                    </button>
                  </form>
                ) : (
                  <>
                    <span>{video.title}</span>
                    <div className="video-buttons">
                      <button
                        className="delete-video-btn"
                        onClick={() => handleDeleteVideo(video.id)}
                      >
                        üóë X√≥a
                      </button>
                      <button
                        className="add-description-btn"
                        onClick={() => handleAddDescription(video.id)}
                      >
                        üìù Th√™m m√¥ t·∫£
                      </button>
                      <button
                        className="edit-video-btn"
                        onClick={() => handleEditVideoClick(video)}
                      >
                        ‚úèÔ∏è S·ª≠a
                      </button>
                    </div>
                  </>
                )}
              </li>
            ))}
          </ul>
        ) : (
          <p>Ch∆∞a c√≥ video n√†o</p>
        )}
      </section>

      <button onClick={() => navigate(-1)} className="back-button">
        ‚Üê Quay l·∫°i
      </button>
    </div>
  );
};

export default CourseDetail;
